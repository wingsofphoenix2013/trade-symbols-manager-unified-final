from flask import Flask, render_template, request, jsonify, redirect
import sqlite3
import os
import json
import sys
import threading
import time
import websocket
import math
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

app = Flask(__name__)
DB_PATH = "/data/prices.db"
# === –ú–û–î–£–õ–¨ 2: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ ===

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_channel_config():
    default = {"length": 50, "deviation": 2.0}
    try:
        with open("channel_config.json", "r") as f:
            return json.load(f)
    except:
        return default

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
@app.route("/")
def index():
    return render_template("index.html")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (—Å—Ç–∞—Ä–∞—è)
@app.route("/symbol/<symbol>")
def symbol(symbol):
    return render_template("symbol.html", symbol=symbol.upper())

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—ã (ticker.html)
@app.route("/ticker/<symbol>")
def ticker(symbol):
    return render_template("ticker.html", symbol=symbol.upper())

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞
@app.route("/channel-settings", methods=["GET", "POST"])
def channel_settings():
    if request.method == "POST":
        length = int(request.form.get("length", 50))
        deviation = float(request.form.get("deviation", 2.0))
        with open("channel_config.json", "w") as f:
            json.dump({"length": length, "deviation": deviation}, f)
        return redirect("/")
    else:
        config = load_channel_config()
        return render_template("channel_settings.html", length=config["length"], deviation=config["deviation"])

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è BUYORDER / SELLORDER —Å—Å—ã–ª–æ–∫
@app.route("/order-info")
def order_info():
    return "<h2 style='text-align:center; font-family:sans-serif;'>ORDER INFO ‚Äî –∑–∞–≥–ª—É—à–∫–∞</h2>"
# === –ú–û–î–£–õ–¨ 3: API ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ ===

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
@app.route("/api/symbols", methods=["GET", "POST"])
def api_symbols():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if request.method == "GET":
        c.execute("SELECT name FROM symbols ORDER BY name ASC")
        symbols = [row[0].upper() for row in c.fetchall()]
        conn.close()
        return jsonify(symbols)
    elif request.method == "POST":
        data = request.get_json()
        symbol = data.get("symbol", "").upper()
        if not symbol:
            return jsonify({"error": "Symbol is required"}), 400
        c.execute("INSERT OR IGNORE INTO symbols (name) VALUES (?)", (symbol,))
        conn.commit()
        conn.close()
        return jsonify({"success": True})

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏ –µ–≥–æ —Å–≤–µ—á–µ–π
@app.route("/api/symbols/<symbol>", methods=["DELETE"])
def delete_symbol(symbol):
    symbol = symbol.upper()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM symbols WHERE name = ?", (symbol,))
    c.execute("DELETE FROM prices WHERE symbol = ?", (symbol.lower(),))
    conn.commit()
    conn.close()
    return jsonify({"success": True})

# –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã
@app.route("/api/clear/<symbol>", methods=["DELETE"])
def clear_prices(symbol):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM prices WHERE symbol = ?", (symbol.lower(),))
    conn.commit()
    conn.close()
    return jsonify({"success": True})
# === –ú–û–î–£–õ–¨ 4: –ü—Ä–∏—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ webhook ===

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        if request.is_json:
            data = request.get_json()
            message = data.get("message", "")
        else:
            message = request.data.decode("utf-8")

        print("üö® WEBHOOK –°–û–û–ë–©–ï–ù–ò–ï:", message)
        sys.stdout.flush()

        parts = message.strip().split()
        if not parts or len(parts) < 2:
            return jsonify({"status": "invalid format"}), 400

        action = parts[0].upper()
        raw_symbol = parts[1].upper()
        symbol = raw_symbol.replace(".P", "")  # —É–¥–∞–ª—è–µ–º .P

        if action not in ["BUY", "SELL", "BUYZONE", "SELLZONE", "BUYORDER", "SELLORDER"]:
            return jsonify({"status": "unknown action"}), 400

        timestamp = datetime.utcnow().replace(second=0, microsecond=0).isoformat()
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT INTO signals (symbol, action, timestamp) VALUES (?, ?, ?)", (symbol, action, timestamp))
        conn.commit()
        conn.close()

        return jsonify({"status": "success"}), 200

    except Exception as e:
        print("Webhook error:", e)
        sys.stdout.flush()
    return jsonify({"status": "ignored"}), 400
# === –ú–û–î–£–õ–¨ 5: API —Å–≤–µ—á–µ–π + —Å–∏–≥–Ω–∞–ª + —Ä–∞—Å—á—ë—Ç –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Å–≤–µ—á—É ===

@app.route("/api/candles/<symbol>")
def api_candles(symbol):
    interval = request.args.get("interval", "1m")
    if interval not in ["1m", "5m"]:
        return jsonify([])

    try:
        config = load_channel_config()
        length = config.get("length", 50)
        deviation = config.get("deviation", 2.0)

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT timestamp, open, high, low, close FROM prices WHERE symbol = ? ORDER BY timestamp ASC", (symbol.lower(),))
        rows = c.fetchall()
        c.execute("SELECT timestamp, action FROM signals WHERE symbol = ?", (symbol.upper(),))
        signal_rows = [(datetime.fromisoformat(row[0]), row[1].upper()) for row in c.fetchall()]
        conn.close()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î:", e)
        return jsonify([])

    from collections import defaultdict

    prices_map = []
    for ts_str, o, h, l, c_ in rows:
        try:
            ts = datetime.fromisoformat(ts_str)
        except:
            continue
        prices_map.append((ts, float(o), float(h), float(l), float(c_)))

    candles_raw = []
    if interval == "5m":
        grouped = defaultdict(list)
        for ts, o, h, l, c_ in prices_map:
            minute = (ts.minute // 5) * 5
            ts_bin = ts.replace(minute=minute, second=0, microsecond=0)
            grouped[ts_bin].append((o, h, l, c_))
        for ts in sorted(grouped.keys()):
            bucket = grouped[ts]
            if not bucket:
                continue
            o = bucket[0][0]
            h = max(x[1] for x in bucket)
            l = min(x[2] for x in bucket)
            c_ = bucket[-1][3]
            candles_raw.append((ts, o, h, l, c_))
    else:
        for ts, o, h, l, c_ in prices_map:
            ts_clean = ts.replace(second=0, microsecond=0)
            candles_raw.append((ts_clean, o, h, l, c_))

    group_minutes = 5 if interval == "5m" else 1
    group = {}

    for i in range(len(candles_raw)):
        ts, o, h, l, c_ = candles_raw[i]
        key = ts.replace(second=0, microsecond=0)

        orders = []
        zones = []
        for st, act in signal_rows:
            if key <= st < key + timedelta(minutes=group_minutes):
                if "ORDER" in act:
                    orders.append((st, act))
                elif "ZONE" in act:
                    zones.append((st, act))

        signal_text = ""
        signal_type = ""

        if interval == "5m":
            if orders and (not zones or orders[0][0] < zones[0][0]):
                signal_text = orders[0][1] + " (-)"
            elif zones and (not orders or zones[0][0] < orders[0][0]):
                signal_text = orders[0][1] if orders else ""
                signal_type = zones[-1][1]
            elif zones and orders:
                signal_text = orders[0][1] + " (-)"
                signal_type = zones[-1][1]

        # —Ä–∞—Å—á—ë—Ç –∫–∞–Ω–∞–ª–∞
        window = candles_raw[max(0, i - length + 1): i + 1]
        if not window:
            continue
        avg_x = sum(range(len(window))) / len(window)
        avg_y = sum([row[4] for row in window]) / len(window)
        cov_xy = sum([(i - avg_x) * (row[4] - avg_y) for i, row in enumerate(window)])
        var_x = sum([(i - avg_x) ** 2 for i in range(len(window))])
        slope = cov_xy / var_x if var_x else 0
        intercept = avg_y - slope * avg_x

        expected = [intercept + slope * i for i in range(len(window))]
        std = (sum([(window[i][4] - expected[i]) ** 2 for i in range(len(window))]) / len(window)) ** 0.5
        upper = expected[-1] + deviation * std
        lower = expected[-1] - deviation * std
        mid = expected[-1]

        width_percent = round((upper - lower) / mid * 100, 2) if mid else 0
        angle_rad = math.atan(slope)
        angle_deg = round(math.degrees(angle_rad), 1)

        direction = "–≤–≤–µ—Ä—Ö" if angle_deg > 2 else "–≤–Ω–∏–∑" if angle_deg < -2 else "—Ñ–ª–µ—Ç"

        group[key] = {
            "time": key.strftime("%Y-%m-%d %H:%M"),
            "open": o,
            "high": h,
            "low": l,
            "close": c_,
            "signal": signal_text or signal_type,
            "channel": f"{lower:.5f} / {mid:.5f} / {upper:.5f}",
        }

    result = list(reversed(list(group.values())))
    return jsonify(result)

# === –ú–û–î–£–õ–¨ 6: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –ø–æ—Ç–æ–∫ Binance WebSocket ===

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS symbols (name TEXT PRIMARY KEY)")
    c.execute("CREATE TABLE IF NOT EXISTS signals (id INTEGER PRIMARY KEY AUTOINCREMENT, symbol TEXT, action TEXT, timestamp TEXT)")
    c.execute("CREATE TABLE IF NOT EXISTS prices (id INTEGER PRIMARY KEY AUTOINCREMENT, symbol TEXT, timestamp TEXT, open REAL, high REAL, low REAL, close REAL)")
    conn.commit()
    conn.close()

# –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 1-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –æ—Ç Binance
def fetch_kline_stream():
    def on_message(ws, msg):
        try:
            data = json.loads(msg)
            k = data['data']['k']
            if not k['x']:
                return
            symbol = data['data']['s'].lower()
            close = k['c']
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ: {symbol} @ {close}")
            sys.stdout.flush()

            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("INSERT INTO prices (symbol, timestamp, open, high, low, close) VALUES (?, ?, ?, ?, ?, ?)", (
                symbol,
                datetime.utcfromtimestamp(k['t'] // 1000).isoformat(),
                float(k['o']), float(k['h']), float(k['l']), float(k['c'])
            ))
            conn.commit()
            conn.close()
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {symbol} {k['t']} {k['c']}")
            sys.stdout.flush()
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—á–∏:", e)
            sys.stdout.flush()

    def run():
        while True:
            try:
                conn = sqlite3.connect(DB_PATH)
                c = conn.cursor()
                c.execute("SELECT name FROM symbols")
                symbols = [row[0].lower() for row in c.fetchall()]
                conn.close()
                if not symbols:
                    print("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ñ–¥—ë–º...")
                    time.sleep(5)
                    continue
                streams = [f"{s}@kline_1m" for s in symbols]
                url = "wss://fstream.binance.com/stream?streams=" + "/".join(streams)
                print("üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞:", streams)
                sys.stdout.flush()
                ws = websocket.WebSocketApp(url, on_message=on_message)
                ws.run_forever()
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ WebSocket:", e)
                time.sleep(5)

    threading.Thread(target=run, daemon=True).start()
# === –ú–û–î–£–õ–¨ 7: Debug ‚Äî intercept —á–µ—Ä–µ–∑ mid –∏ avgX ===

@app.route("/debug/<symbol>")
def debug_channel(symbol):
    from collections import defaultdict
    from math import sqrt, atan, degrees

    interval = request.args.get("interval", "5m")
    if interval != "5m":
        return "<h3>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ interval=5m</h3>"

    try:
        config = load_channel_config()
        length = config.get("length", 50)
        deviation = config.get("deviation", 2.0)

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT timestamp, open, high, low, close FROM prices WHERE symbol = ? ORDER BY timestamp ASC", (symbol.lower(),))
        rows = c.fetchall()
        conn.close()
    except Exception as e:
        return f"<h3>–û—à–∏–±–∫–∞ –ë–î: {e}</h3>"

    grouped = defaultdict(list)
    for ts_str, o, h, l, c_ in rows:
        try:
            ts = datetime.fromisoformat(ts_str)
        except:
            continue
        minute = (ts.minute // 5) * 5
        ts_bin = ts.replace(minute=minute, second=0, microsecond=0)
        grouped[ts_bin].append((float(o), float(h), float(l), float(c_)))

    candles = []
    for ts in sorted(grouped.keys()):
        bucket = grouped[ts]
        if not bucket:
            continue
        o = bucket[0][0]
        h = max(x[1] for x in bucket)
        l = min(x[2] for x in bucket)
        c_ = bucket[-1][3]
        candles.append((ts, {"open": o, "high": h, "low": l, "close": c_}))

    if len(candles) < length - 1:
        return "<h3>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</h3>"

    closes = [c[1]["close"] for c in candles[-(length - 1):]]
    current_price = latest_price.get(symbol.lower())
    if not current_price:
        return "<h3>–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã</h3>"
    closes.append(current_price)

    lows = [c[1]["low"] for c in candles[-(length - 1):]]
    highs = [c[1]["high"] for c in candles[-(length - 1):]]

    x = list(range(length))
    avgX = sum(x) / length
    mid = sum(closes) / length

    # slope
    avgY = mid
    covXY = sum((x[i] - avgX) * (closes[i] - avgY) for i in range(length))
    varX = sum((x[i] - avgX) ** 2 for i in range(length))
    slope = covXY / varX

    # intercept —á–µ—Ä–µ–∑ mid –∏ avgX
    intercept = mid - slope * avgX

    # stdDev
    dev = 0.0
    for i in range(length):
        expected = slope * i + intercept
        dev += (closes[i] - expected) ** 2
    stdDev = sqrt(dev / length)

    # –∫–∞–Ω–∞–ª
    y_start = intercept
    y_end = intercept + slope * (length - 1)
    center = (y_start + y_end) / 2
    upper = center + deviation * stdDev
    lower = center - deviation * stdDev
    width_percent = round((upper - lower) / center * 100, 2)
    angle_deg = round(degrees(atan(slope)), 2)

    rows_html = ""
    recent_candles = candles[-(length - 1):]
    for i in range(length - 1):
        ts = recent_candles[i][0].astimezone(ZoneInfo("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M")
        o = recent_candles[i][1]["open"]
        h = recent_candles[i][1]["high"]
        l = recent_candles[i][1]["low"]
        c_ = recent_candles[i][1]["close"]
        rows_html += f"<tr><td>{ts}</td><td>{o}</td><td>{h}</td><td>{l}</td><td>{c_}</td><td>‚Äî</td></tr>"
    rows_html += f"<tr><td><i>Current (latest_price)</i></td><td colspan='4'>–¶–µ–Ω–∞: {current_price}</td><td>‚Äî</td></tr>"

    min_close = min(closes)
    max_close = max(closes)
    min_low = min(lows)
    max_high = max(highs)

    return f"""
    <html>
    <head>
        <title>Debug: {symbol.upper()}</title>
        <style>
            table {{ font-family: sans-serif; border-collapse: collapse; width: 100%; }}
            th, td {{ border: 1px solid #aaa; padding: 6px; text-align: right; }}
            th {{ background-color: #f0f0f0; }}
            h2 {{ font-family: sans-serif; }}
            .box {{ font-family: monospace; margin-top: 10px; padding: 10px; background: #f8f8f8; border: 1px solid #ccc; }}
        </style>
    </head>
    <body>
        <h2>DEBUG: {symbol.upper()} ({interval}) + current + intercept by mid & avgX</h2>
        <div class="box">
            slope = {round(slope, 8)}<br>
            intercept = {round(intercept, 5)}<br>
            stdDev = {round(stdDev, 8)}<br>
            –ö–ê–ù–ê–õ: <b>{round(lower,5)} / {round(center,5)} / {round(upper,5)}</b><br>
            <b>–®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞:</b> {width_percent}%<br>
            <b>–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞:</b> {angle_deg}&deg;<br><br>
            <b>min(close):</b> {round(min_close,5)}<br>
            <b>max(close):</b> {round(max_close,5)}<br>
            <b>min(low):</b> {round(min_low,5)}<br>
            <b>max(high):</b> {round(max_high,5)}<br>
        </div>
        <br>
        <table>
            <thead><tr><th>–í—Ä–µ–º—è (–ö–∏–µ–≤)</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>reg_line</th></tr></thead>
            <tbody>{rows_html}</tbody>
        </table>
    </body>
    </html>
    """
# === –ú–û–î–£–õ–¨ 8: –ü–æ—Ç–æ–∫ Binance @trade ‚Äî —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ latest_price ===
latest_price = {}

def fetch_trade_stream():
    def on_message(ws, msg):
        try:
            data = json.loads(msg)
            trade = data['data']
            symbol = trade['s'].lower()
            price = float(trade['p'])
            latest_price[symbol] = price
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ trade-—Å–æ–æ–±—â–µ–Ω–∏—è:", e)

    def run():
        while True:
            try:
                conn = sqlite3.connect(DB_PATH)
                c = conn.cursor()
                c.execute("SELECT name FROM symbols")
                symbols = [row[0].lower() for row in c.fetchall()]
                conn.close()
                if not symbols:
                    print("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @trade")
                    time.sleep(5)
                    continue
                streams = [f"{s}@trade" for s in symbols]
                url = "wss://fstream.binance.com/stream?streams=" + "/".join(streams)
                print("üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @trade:", streams)
                sys.stdout.flush()
                ws = websocket.WebSocketApp(url, on_message=on_message)
                ws.run_forever()
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ WebSocket (@trade):", e)
                time.sleep(5)

    threading.Thread(target=run, daemon=True).start()
# === –ú–û–î–£–õ–¨ 9: –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∏–∑ latest_price ===

@app.route("/latest-prices")
def latest_prices():
    rows = []
    for symbol, price in sorted(latest_price.items()):
        rows.append(f"<tr><td>{symbol.upper()}</td><td>{price}</td></tr>")
    html = f"""
    <html>
    <head>
        <title>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–∑ –ø–æ—Ç–æ–∫–∞ @trade</title>
        <style>
            table {{ font-family: sans-serif; border-collapse: collapse; width: 400px; }}
            th, td {{ border: 1px solid #aaa; padding: 6px; text-align: right; }}
            th {{ background-color: #eee; }}
        </style>
    </head>
    <body>
        <h2>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (–∏–∑ latest_price)</h2>
        <table>
            <thead><tr><th>–°–∏–º–≤–æ–ª</th><th>–¶–µ–Ω–∞</th></tr></thead>
            <tbody>{"".join(rows) if rows else "<tr><td colspan='2'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>"}</tbody>
        </table>
    </body>
    </html>
    """
    return html
# === –ú–û–î–£–õ–¨ 10: API live-channel ‚Äî —Ä–∞—Å—á—ë—Ç –ø–æ –ª–æ–≥–∏–∫–µ TV (49 —Å–≤–µ—á–µ–π + latest_price) ===

@app.route("/api/live-channel/<symbol>")
def api_live_channel(symbol):
    from collections import defaultdict
    from math import sqrt, atan, degrees
    from datetime import datetime, timedelta

    symbol = symbol.lower()
    interval_minutes = 5
    now = datetime.utcnow()
    start_minute = now.minute - now.minute % interval_minutes
    current_start = now.replace(minute=start_minute, second=0, microsecond=0)

    try:
        config = load_channel_config()
        length = config.get("length", 50)
        deviation = config.get("deviation", 2.0)

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT timestamp, open, high, low, close FROM prices WHERE symbol = ? ORDER BY timestamp ASC", (symbol,))
        rows = c.fetchall()
        c.execute("SELECT timestamp, action FROM signals WHERE symbol = ?", (symbol.upper(),))
        signal_rows = [(datetime.fromisoformat(r[0]), r[1].upper()) for r in c.fetchall()]
        conn.close()
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}"})

    # üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
    grouped = defaultdict(list)
    for ts_str, o, h, l, c_ in rows:
        try:
            ts = datetime.fromisoformat(ts_str)
        except:
            continue
        minute = (ts.minute // interval_minutes) * interval_minutes
        key = ts.replace(minute=minute, second=0, microsecond=0)
        grouped[key].append((float(o), float(h), float(l), float(c_)))

    # üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≤–µ—á–µ–π
    candles = []
    for ts in sorted(grouped.keys()):
        bucket = grouped[ts]
        if bucket:
            o = bucket[0][0]
            h = max(x[1] for x in bucket)
            l = min(x[2] for x in bucket)
            c_ = bucket[-1][3]
            candles.append((ts, {"open": o, "high": h, "low": l, "close": c_}))

    if len(candles) < length - 1:
        return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"})

    # üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    current_price = latest_price.get(symbol)
    if not current_price:
        return jsonify({"error": "–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"})

    # üìä –†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (–¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞)
    closes = [c[1]["close"] for c in candles[-(length - 1):]]
    closes.append(current_price)

    x = list(range(length))
    avgX = sum(x) / length
    mid = sum(closes) / length
    covXY = sum((x[i] - avgX) * (closes[i] - mid) for i in range(length))
    varX = sum((x[i] - avgX) ** 2 for i in range(length))
    slope = covXY / varX
    intercept = mid - slope * avgX

    # üìè –®–∏—Ä–∏–Ω–∞ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    dev = 0.0
    for i in range(length):
        expected = slope * i + intercept
        dev += (closes[i] - expected) ** 2
    stdDev = sqrt(dev / length)

    y_start = intercept
    y_end = intercept + slope * (length - 1)
    center = (y_start + y_end) / 2
    upper = center + deviation * stdDev
    lower = center - deviation * stdDev
    width_percent = round((upper - lower) / center * 100, 2)

    # üß† –í—Å—Ç–∞–≤–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É–≥–ª–∞
    base_price = closes[0] if closes[0] != 0 else 1
    norm_closes = [c / base_price for c in closes]
    norm_mid = sum(norm_closes) / length
    norm_covXY = sum((x[i] - avgX) * (norm_closes[i] - norm_mid) for i in range(length))
    norm_varX = sum((x[i] - avgX) ** 2 for i in range(length))
    norm_slope = norm_covXY / norm_varX
    angle_deg = round(degrees(atan(norm_slope)), 2)

    # üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    if angle_deg > 2:
        direction = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π ‚ÜóÔ∏è"
        color = "green"
    elif angle_deg < -2:
        direction = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π ‚ÜòÔ∏è"
        color = "red"
    else:
        direction = "—Ñ–ª–µ—Ç ‚û°Ô∏è"
        color = "black"

    # üìç –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    signal = ""
    for st, act in signal_rows:
        if current_start <= st < current_start + timedelta(minutes=interval_minutes):
            signal = act
            break

    # üïì –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    local_time = now.replace(tzinfo=timezone.utc).astimezone(ZoneInfo("Europe/Kyiv"))

    return jsonify({
        "time": now.strftime("%Y-%m-%d %H:%M:%S"),
        "local_time": local_time.strftime("%Y-%m-%d %H:%M:%S"),
        "open_price": round(candles[-1][1]["open"], 5),
        "current_price": round(current_price, 5),
        "direction": direction,
        "direction_color": color,
        "angle": angle_deg,
        "width_percent": width_percent,
        "signal": signal
    })
# === –ú–û–î–£–õ–¨ 11: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î (—Ç–∞–±–ª–∏—Ü—ã) ===

def init_db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA foreign_keys = ON")
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    c.execute("""
        CREATE TABLE IF NOT EXISTS symbols (
            name TEXT PRIMARY KEY
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤—Ö–æ–¥—è—â–∏–µ webhook-—Å–æ–±—ã—Ç–∏—è)
    c.execute("""
        CREATE TABLE IF NOT EXISTS signals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            action TEXT,
            timestamp TEXT
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫/—Å–≤–µ—á–µ–π
    c.execute("""
        CREATE TABLE IF NOT EXISTS prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            timestamp TEXT,
            open REAL,
            high REAL,
            low REAL,
            close REAL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    c.execute("""
        CREATE TABLE IF NOT EXISTS trades (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            side TEXT,
            entry_time TEXT,
            entry_price REAL,
            size REAL,
            leverage REAL,
            exit_time TEXT,
            exit_price REAL,
            pnl REAL,
            status TEXT,
            strategy TEXT,
            snapshot TEXT,
            comment TEXT,
            FOREIGN KEY (symbol) REFERENCES symbols(name)
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –≤—ã—Ö–æ–¥–æ–≤ –ø–æ —á–∞—Å—Ç—è–º
    c.execute("""
        CREATE TABLE IF NOT EXISTS trade_exits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            trade_id INTEGER,
            time TEXT,
            price REAL,
            size REAL,
            pnl REAL,
            reason TEXT CHECK (reason IN (
                'tp-hit', 'sl-hit', 'manual', 'signal', 'expired', 'error'
            )),
            signal_type TEXT,
            snapshot TEXT,
            comment TEXT,
            FOREIGN KEY (trade_id) REFERENCES trades(id)
        )
    """)

    conn.commit()
    conn.close()
# === –ú–û–î–£–õ–¨ 12: API + –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü –ë–î ===

# HTML-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@app.route("/db")
def view_db():
    return render_template("db.html")

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@app.route("/api/db/<table>")
def api_db_table(table):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    field = request.args.get("field")
    value = request.args.get("value")
    offset = int(request.args.get("offset", 0))
    limit = int(request.args.get("limit", 50))

    allowed_tables = {"symbols", "signals", "prices", "trades", "trade_exits"}
    if table not in allowed_tables:
        return jsonify({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–∞–±–ª–∏—Ü–∞"}), 400

    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        c = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ id
        c.execute(f"PRAGMA table_info({table})")
        columns = [row[1] for row in c.fetchall()]
        order_column = "id" if "id" in columns else "rowid"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query = f"SELECT * FROM {table}"
        params = []

        if field and value:
            query += f" WHERE {field} LIKE ?"
            params.append(f"%{value}%")

        query += f" ORDER BY {order_column} DESC LIMIT ? OFFSET ?"
        params.extend([limit, offset])

        c.execute(query, params)
        rows = [dict(row) for row in c.fetchall()]
        conn.close()

        return jsonify(rows)

    except Exception as e:
        return jsonify({"error": str(e)}), 500
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if __name__ == "__main__":
    init_db()
    fetch_kline_stream()
    fetch_trade_stream()  # ‚Üê –î–æ–±–∞–≤—å –≠–¢–£ —Å—Ç—Ä–æ–∫—É
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
