
# === –ú–û–î–£–õ–¨ IMPORT ===
import os
import time
import json
import threading
import psycopg2
import websocket

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –ú–û–î–£–õ–¨ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã symbols ===
def load_symbols():
    try:
        print("üîé –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã...")
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("SELECT name FROM symbols")
        symbols = [row[0].lower() for row in cur.fetchall()]
        conn.close()
        print(f"‚úÖ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        return symbols
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ symbols:", e)
        return []

# === –ú–û–î–£–õ–¨ 2: –ü–æ—Ç–æ–∫ @trade ‚Äî –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å latest_price ===
latest_price = {}

def run_trade_stream():
    def on_message(ws, msg):
        try:
            data = json.loads(msg)
            trade = data['data']
            symbol = trade['s'].lower()
            price = float(trade['p'])
            latest_price[symbol] = price
            
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TRADE:", e)

    def run():
        while True:
            try:
                symbols = load_symbols()
                if not symbols:
                    print("‚ö†Ô∏è –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @trade")
                    time.sleep(10)
                    continue
                streams = [f"{s}@trade" for s in symbols]
                url = "wss://fstream.binance.com/stream?streams=" + "/".join(streams)
                print("üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TRADE:", url)
                ws = websocket.WebSocketApp(url, on_message=on_message)
                ws.run_forever()
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ WebSocket TRADE:", e)
                time.sleep(10)

    threading.Thread(target=run, daemon=True).start()

# === –ú–û–î–£–õ–¨ 3: –ü–æ—Ç–æ–∫ @kline_1m ‚Äî –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É prices_pg ===
def run_kline_stream():
    def on_message(ws, message):
        try:
            data = json.loads(message)
            kline = data['data']['k']
            if not kline['x']:
                return
            symbol = data['data']['s'].lower()
            ts = kline['t']
            o = float(kline['o'])
            h = float(kline['h'])
            l = float(kline['l'])
            c_ = float(kline['c'])
            ts_iso = time.strftime('%Y-%m-%dT%H:%M:%S', time.gmtime(ts / 1000))

            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO prices_pg (symbol, timestamp, open, high, low, close) VALUES (%s, %s, %s, %s, %s, %s)",
                (symbol, ts_iso, o, h, l, c_)
            )
            conn.commit()
            conn.close()
            print(f"üì¶ KLINE: {symbol} {ts_iso} ‚Üí {o}/{h}/{l}/{c_}")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ KLINE:", e)

    def run():
        while True:
            try:
                symbols = load_symbols()
                if not symbols:
                    print("‚ö†Ô∏è –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @kline_1m")
                    time.sleep(10)
                    continue
                streams = [f"{s}@kline_1m" for s in symbols]
                url = "wss://fstream.binance.com/stream?streams=" + "/".join(streams)
                print("üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ KLINE:", url)
                ws = websocket.WebSocketApp(url, on_message=on_message)
                ws.run_forever()
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ WebSocket KLINE:", e)
                time.sleep(10)

    threading.Thread(target=run, daemon=True).start()


# === –ú–û–î–£–õ–¨ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π (candles_5m) ===

from datetime import datetime, timedelta

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø–æ 5 —Å–≤–µ—á–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
buffers_5m = {}

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π 5m-—Å–≤–µ—á–∏
def aggregate_and_save_5m(symbol, buffer, conn_params):
    try:
        if len(buffer) < 5:
            return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

        opens = [row['open'] for row in buffer]
        highs = [row['high'] for row in buffer]
        lows = [row['low'] for row in buffer]
        closes = [row['close'] for row in buffer]
        timestamp = buffer[0]['timestamp']  # –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ (–Ω–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)

        o = opens[0]
        h = max(highs)
        l = min(lows)
        c = closes[-1]

        conn = psycopg2.connect(**conn_params)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO candles_5m (symbol, timestamp, open, high, low, close) VALUES (%s, %s, %s, %s, %s, %s)",
            (symbol, timestamp, o, h, l, c)
        )
        conn.commit()
        conn.close()
        print(f"üïî [candles_5m] {symbol} | {timestamp} | {o}-{h}-{l}-{c}", flush=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤–µ—á–∏ 5m: {e}", flush=True)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π M1-—Å–≤–µ—á–∏ –≤ –±—É—Ñ–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏
def process_kline_for_5m(symbol, kline, conn_params):
    ts = datetime.fromtimestamp(kline['timestamp'] / 1000).replace(second=0, microsecond=0)
    ts_5m = ts.replace(minute=(ts.minute // 5) * 5)

    candle = {
        'timestamp': ts_5m,
        'open': float(kline['open']),
        'high': float(kline['high']),
        'low': float(kline['low']),
        'close': float(kline['close'])
    }

    if symbol not in buffers_5m:
        buffers_5m[symbol] = []

    buf = buffers_5m[symbol]

    # –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å–≤–µ—á–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    if not buf or buf[-1]['timestamp'] == candle['timestamp']:
        buf.append(candle)
    else:
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω–∏–ª—Å—è ‚Üí –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        aggregate_and_save_5m(symbol, buf, conn_params)
        buffers_5m[symbol] = [candle]

# === –ú–û–î–£–õ–¨ ENTRYPOINT ===
if __name__ == "__main__":
    print("üöÄ Background Worker: TRADE + KLINE PostgreSQL")
    run_trade_stream()
    run_kline_stream()
    while True:
        time.sleep(60)
